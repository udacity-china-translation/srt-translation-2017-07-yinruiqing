1
00:00:00,000 --> 00:00:02,959
我们使用 git 来跟踪我们的项目

2
00:00:02,959 --> 00:00:04,753
如果我们在本地工作 这是非常好的一个工具

3
00:00:04,753 --> 00:00:07,574
但是为了能够把本地的代码库和他人进行分享


4
00:00:07,575 --> 00:00:09,300
我们需要另一个工具

5
00:00:09,300 --> 00:00:11,554
这个工具的名字叫 Github

6
00:00:11,554 --> 00:00:15,820
GitHub 是一个用来托管版本控制代码库的服务

7
00:00:15,820 --> 00:00:18,304
尽管它们的名字非常像

8
00:00:18,304 --> 00:00:21,420
git 和 GitHub 是不同的

9
00:00:21,420 --> 00:00:23,219
Git 是一个工具 你可以用它来管理

10
00:00:23,219 --> 00:00:27,094
代码库 而且你通常会通过命令行来使用 git

11
00:00:27,094 --> 00:00:32,274
Github 是一个托管服务 你通常会直接通过浏览器来与它交互

12
00:00:32,274 --> 00:00:36,015
我们将发送一份本地仓库的拷贝到 GitHub 中

13
00:00:36,015 --> 00:00:38,413
这份拷贝不是保存在我们本地的机器中

14
00:00:38,412 --> 00:00:41,169
所以我们叫它远程代码库

15
00:00:41,170 --> 00:00:43,905
这节课中 我们主要学习的命令有

16
00:00:43,905 --> 00:00:46,978
git remote - 用来管理远程代码库

17
00:00:46,978 --> 00:00:50,129
git push - 将修改提交到远程代码库

18
00:00:50,130 --> 00:00:52,200
然后 我们会学习 git pull 它会

19
00:00:52,200 --> 00:00:55,200
获得远程代码库的更新

20
00:00:55,200 --> 00:00:57,509
这些命令 push 和 pull,

21
00:00:57,509 --> 00:00:59,185
可能最开始没有什么意义

22
00:00:59,185 --> 00:01:02,530
但是站在你本地机器的立场来考虑这些命令

23
00:01:02,530 --> 00:01:07,831
你修改了本地的代码库内容 你希望远程代码库可以同时更新

24
00:01:07,831 --> 00:01:10,468
所以你将本地的修改 push 到了远程代码库

25
00:01:10,468 --> 00:01:14,548
但是如果远程代码库有一些修改 你想把这些修改也放到本地的代码库

26
00:01:14,549 --> 00:01:18,019
你就需要 pull 这些修改到本地代码库

27
00:01:18,019 --> 00:01:20,969
所以 这节课我们有三个命令需要学习

28
00:01:20,968 --> 00:01:25,000
现在 让我们先研究一下远程代码库到底是什么

